From 6396c898e191db0f5998b3713f7a6b65553abe51 Mon Sep 17 00:00:00 2001
From: Pawel Lebioda <pawel.lebioda@intel.com>
Date: Fri, 1 Apr 2016 19:13:25 +0200
Subject: [PATCH] test: fix timeouting obj_tx_add_range test

The obj_tx_add_range was timeouting sometimes because of new scenario
which checks for persistent memory leaks (pmem/issues#162)
---
 src/test/obj_tx_add_range/TEST0               |  4 +-
 src/test/obj_tx_add_range/TEST1               |  2 +-
 src/test/obj_tx_add_range/TEST2               | 50 ++++++++++++++++++++++++
 src/test/obj_tx_add_range/err0.log.match      |  0
 src/test/obj_tx_add_range/err1.log.match      |  0
 src/test/obj_tx_add_range/obj_tx_add_range.c  | 56 ++++++++++++++-------------
 src/test/obj_tx_add_range/out0.log.match      |  3 --
 src/test/obj_tx_add_range/out1.log.match      |  3 --
 src/test/obj_tx_add_range/valgrind1.log.match |  2 +-
 9 files changed, 83 insertions(+), 37 deletions(-)
 create mode 100755 src/test/obj_tx_add_range/TEST2
 delete mode 100644 src/test/obj_tx_add_range/err0.log.match
 delete mode 100644 src/test/obj_tx_add_range/err1.log.match
 delete mode 100644 src/test/obj_tx_add_range/out0.log.match
 delete mode 100644 src/test/obj_tx_add_range/out1.log.match

diff --git a/src/test/obj_tx_add_range/TEST0 b/src/test/obj_tx_add_range/TEST0
index 2e1526c..b1812cb 100755
--- a/src/test/obj_tx_add_range/TEST0
+++ b/src/test/obj_tx_add_range/TEST0
@@ -42,8 +42,6 @@ export UNITTEST_NUM=0
 
 setup
 
-expect_normal_exit ./obj_tx_add_range$EXESUFFIX $DIR/testfile1
-
-check
+expect_normal_exit ./obj_tx_add_range$EXESUFFIX $DIR/testfile1 0
 
 pass
diff --git a/src/test/obj_tx_add_range/TEST1 b/src/test/obj_tx_add_range/TEST1
index 09e306d..7d76156 100755
--- a/src/test/obj_tx_add_range/TEST1
+++ b/src/test/obj_tx_add_range/TEST1
@@ -49,7 +49,7 @@ setup
 expect_normal_exit valgrind --tool=pmemcheck\
 	--log-file=valgrind$UNITTEST_NUM.log\
 	--mult-stores=no\
-	./obj_tx_add_range$EXESUFFIX $DIR/testfile1 $i
+	./obj_tx_add_range$EXESUFFIX $DIR/testfile1 0
 
 check
 
diff --git a/src/test/obj_tx_add_range/TEST2 b/src/test/obj_tx_add_range/TEST2
new file mode 100755
index 0000000..afee81e
--- /dev/null
+++ b/src/test/obj_tx_add_range/TEST2
@@ -0,0 +1,50 @@
+#!/bin/bash -e
+#
+# Copyright 2015-2016, Intel Corporation
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+#
+#     * Redistributions of source code must retain the above copyright
+#       notice, this list of conditions and the following disclaimer.
+#
+#     * Redistributions in binary form must reproduce the above copyright
+#       notice, this list of conditions and the following disclaimer in
+#       the documentation and/or other materials provided with the
+#       distribution.
+#
+#     * Neither the name of the copyright holder nor the names of its
+#       contributors may be used to endorse or promote products derived
+#       from this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+#
+
+#
+# src/test/obj_tx_add_range/TEST2 -- unit test for pmemobj_tx_add_range
+#
+export UNITTEST_NAME=obj_tx_add_range/TEST2
+export UNITTEST_NUM=2
+
+# standard unit test setup
+. ../unittest/unittest.sh
+
+memcheck force-disable
+require_fs_type pmem
+
+setup
+
+expect_normal_exit ./obj_tx_add_range$EXESUFFIX $DIR/testfile1 1
+
+pass
diff --git a/src/test/obj_tx_add_range/err0.log.match b/src/test/obj_tx_add_range/err0.log.match
deleted file mode 100644
index e69de29..0000000
diff --git a/src/test/obj_tx_add_range/err1.log.match b/src/test/obj_tx_add_range/err1.log.match
deleted file mode 100644
index e69de29..0000000
diff --git a/src/test/obj_tx_add_range/obj_tx_add_range.c b/src/test/obj_tx_add_range/obj_tx_add_range.c
index 9c1e41d..472fc0e 100644
--- a/src/test/obj_tx_add_range/obj_tx_add_range.c
+++ b/src/test/obj_tx_add_range/obj_tx_add_range.c
@@ -566,39 +566,43 @@ main(int argc, char *argv[])
 	START(argc, argv, "obj_tx_add_range");
 	util_init();
 
-	if (argc != 2)
-		UT_FATAL("usage: %s [file]", argv[0]);
+	if (argc != 3)
+		UT_FATAL("usage: %s [file] [0|1]", argv[0]);
+
+	int do_reopen = atoi(argv[2]);
 
 	PMEMobjpool *pop;
 	if ((pop = pmemobj_create(argv[1], LAYOUT_NAME, PMEMOBJ_MIN_POOL,
 	    S_IWUSR | S_IRUSR)) == NULL)
 		UT_FATAL("!pmemobj_create");
 
-	do_tx_add_range_commit(pop);
-	VALGRIND_WRITE_STATS;
-	do_tx_add_range_abort(pop);
-	VALGRIND_WRITE_STATS;
-	do_tx_add_range_commit_nested(pop);
-	VALGRIND_WRITE_STATS;
-	do_tx_add_range_abort_nested(pop);
-	VALGRIND_WRITE_STATS;
-	do_tx_add_range_abort_after_nested(pop);
-	VALGRIND_WRITE_STATS;
-	do_tx_add_range_twice_commit(pop);
-	VALGRIND_WRITE_STATS;
-	do_tx_add_range_twice_abort(pop);
-	VALGRIND_WRITE_STATS;
-	do_tx_add_range_alloc_commit(pop);
-	VALGRIND_WRITE_STATS;
-	do_tx_add_range_alloc_abort(pop);
-	VALGRIND_WRITE_STATS;
-	do_tx_add_range_overlapping(pop);
-	VALGRIND_WRITE_STATS;
-	pmemobj_close(pop);
-
-	/* do not run this on valgrind because it takes too long */
-	if (!On_valgrind)
+	if (do_reopen) {
+		pmemobj_close(pop);
 		do_tx_add_range_reopen(argv[1]);
+	} else {
+		do_tx_add_range_commit(pop);
+		VALGRIND_WRITE_STATS;
+		do_tx_add_range_abort(pop);
+		VALGRIND_WRITE_STATS;
+		do_tx_add_range_commit_nested(pop);
+		VALGRIND_WRITE_STATS;
+		do_tx_add_range_abort_nested(pop);
+		VALGRIND_WRITE_STATS;
+		do_tx_add_range_abort_after_nested(pop);
+		VALGRIND_WRITE_STATS;
+		do_tx_add_range_twice_commit(pop);
+		VALGRIND_WRITE_STATS;
+		do_tx_add_range_twice_abort(pop);
+		VALGRIND_WRITE_STATS;
+		do_tx_add_range_alloc_commit(pop);
+		VALGRIND_WRITE_STATS;
+		do_tx_add_range_alloc_abort(pop);
+		VALGRIND_WRITE_STATS;
+		do_tx_add_range_overlapping(pop);
+		VALGRIND_WRITE_STATS;
+		pmemobj_close(pop);
+	}
+
 
 	DONE(NULL);
 }
diff --git a/src/test/obj_tx_add_range/out0.log.match b/src/test/obj_tx_add_range/out0.log.match
deleted file mode 100644
index f3d6392..0000000
--- a/src/test/obj_tx_add_range/out0.log.match
+++ /dev/null
@@ -1,3 +0,0 @@
-obj_tx_add_range/TEST0: START: obj_tx_add_range
- ./obj_tx_add_range$(nW) $(nW)testfile1
-obj_tx_add_range/TEST0: Done
diff --git a/src/test/obj_tx_add_range/out1.log.match b/src/test/obj_tx_add_range/out1.log.match
deleted file mode 100644
index 82beb3a..0000000
--- a/src/test/obj_tx_add_range/out1.log.match
+++ /dev/null
@@ -1,3 +0,0 @@
-obj_tx_add_range/TEST1: START: obj_tx_add_range
- ./obj_tx_add_range$(nW) $(nW)testfile1
-obj_tx_add_range/TEST1: Done
diff --git a/src/test/obj_tx_add_range/valgrind1.log.match b/src/test/obj_tx_add_range/valgrind1.log.match
index 17e9c72..b612e9e 100644
--- a/src/test/obj_tx_add_range/valgrind1.log.match
+++ b/src/test/obj_tx_add_range/valgrind1.log.match
@@ -1,7 +1,7 @@
 ==$(nW)== pmemcheck-$(nW), a simple persistent store checker
 ==$(nW)== Copyright (c) $(nW), Intel Corporation
 ==$(nW)== Using Valgrind-$(nW) and LibVEX; rerun with -h for copyright info
-==$(nW)== Command: ./obj_tx_add_range$(nW) $(nW)testfile1
+==$(nW)== Command: ./obj_tx_add_range$(nW) $(nW)testfile1 0
 ==$(nW)== Parent PID: $(nW)
 ==$(nW)== 
 ==$(nW)== Number of stores not made persistent: 0
-- 
2.5.0

